import java.util.Random;

public class PatternSearch {
    // Extracted from the source code of the mod, each color has an integer associated to it
    private static final int PURPLE = 0, YELLOW = 1, BLUE = 2, RED = 3, GREEN = 4;

    public static void findPattern(SearchArea searchArea) {
        for (int y = searchArea.getY1(); y <= searchArea.getY2(); y++) {
            // This message works as a progress bar
            System.out.println("Searching at y " + y);
            for (int x = searchArea.getX1(); x <= searchArea.getX2(); x++) {
                for (int z = searchArea.getZ1(); z <= searchArea.getZ2(); z++) {
                    if (checkPattern(x, y, z)) {
                        System.out.println("Found at: " + x + " " + y + " " + z);
                    }
                }
            }
        }
        System.out.println("Ended");
    }

    private static boolean checkPattern(int x, int y, int z) {
        return (
            // Add the relative positions of the coral blocks here
            getPlantIndex(x + 3, z, y) == BLUE &&
            getPlantIndex(x + 6, z, y) == YELLOW &&
            getPlantIndex(x + 7, z, y) == PURPLE &&

            getPlantIndex(x + 5, z + 1, y) == GREEN &&
            getPlantIndex(x + 9, z + 1, y) == RED
        );
    }

    // This function receives the (X, Y, Z) coordinates and returns the integer associated with a color
    private static int getPlantIndex(int x, int z, int y) {
        Random iconRand = new Random();
        int hash = x * 25799626 ^ z * 6879038 ^ y;
        iconRand.setSeed((long) hash);
        iconRand.setSeed(iconRand.nextLong());
        return iconRand.nextInt(5);
    }
}
